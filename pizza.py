import click
import random


@click.group()
def cli():
    pass


@cli.command()
@click.option('--size', default='L', type=str)
@click.option('--pickup', default=False, is_flag=True)
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
def order(pizza: str, delivery: bool, pickup: bool, size: str):
    """–≥–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—É—Ä—å–µ—Ä–∞"""
    if delivery and pickup:
        click.echo('–°–∞–º–æ–≤—ã–≤–æ–∑ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã')
        return

    if pizza.lower() == 'margherita':
        ordered_pizza = Margherita(size)
    elif pizza.lower() == 'pepperoni':
        ordered_pizza = Pepperoni(size)
    elif pizza.lower() == 'hawaiian':
        ordered_pizza = Hawaiian(size)
    else:
        click.echo('–¢–∞–∫–æ–π –ø–∏—Ü—Ü—ã –Ω–µ—Ç –≤ –º–µ–Ω—é')
        return

    click.echo(bake(ordered_pizza))
    if delivery:
        click.echo(deliver(ordered_pizza))
    if pickup:
        click.echo(pick_up(ordered_pizza))


@cli.command()
def menu():
    """–≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    list_pizza = [Margherita, Pepperoni, Hawaiian]

    for pizza in list_pizza:
        click.echo(f"- {pizza.name} {pizza.symbol} : {', '.join(pizza.ingredients)}")


def log(message: str = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä massage. –ï—Å–ª–∏ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä
    massage –≤ —Ñ–æ—Ä–º–∞—Ç–µ '...{}...', —Ç–æ –≤—ã–≤–µ–¥–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–µ {} –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥.
    """
    def decorator(func):
        def inner_wrapper(*args, **kwargs):
            timer = random.randint(10, 20)
            if message is None:
                return f"{func(*args, **kwargs).__name__} ‚Äî {timer} –º–∏–Ω"
            else:
                return message.format(timer)

        return inner_wrapper

    return decorator


@log('‚úî –ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {} –º–∏–Ω!')
def bake(pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    return


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {} –º–∏–Ω!')
def deliver(pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    return


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {} –º–∏–Ω!')
def pick_up(pizza):
    """–ó–∞–±–∏—Ä–∞–µ—Ç –ø–∏—Ü—Ü—É"""
    return


class BasePizza:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥—É—Ç –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å—Å—è –≤—Å–µ –ø–∏—Ü—Ü—ã"""
    base_size = ['L', 'XL']
    ingredients = []
    name = ''

    def __init__(self, size: str):
        if size.upper() in self.base_size:
            self.size = size.upper()
        else:
            raise ValueError('Invalid size')

    def dict(self):
        return self.ingredients

    def __eq__(self, other):
        return isinstance(other, BasePizza) and self.size == other.size and self.name == other.name


class Margherita(BasePizza):
    """–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞"""
    name = 'Margherita'
    symbol = 'üßÄ'
    ingredients = ['tomato sauce', 'mozzarella', 'tomatoes']

    def __init__(self, size: str = 'L'):
        super().__init__(size)


class Pepperoni(BasePizza):
    """–ü–∏—Ü—Ü–∞ –ø–µ–ø–ø–µ—Ä–æ–Ω–∏"""
    name = 'Pepperoni'
    symbol = 'üçï'
    ingredients = ['tomato sauce', 'mozzarella', 'pepperoni']

    def __init__(self, size: str = 'L'):
        super().__init__(size)


class Hawaiian(BasePizza):
    """–ü–∏—Ü—Ü–∞ –≥–∞–≤–∞–π—Å–∫–∞—è"""
    name = 'Hawaiian'
    symbol = 'üçç'
    ingredients = ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']

    def __init__(self, size: str = 'L'):
        super().__init__(size)


if __name__ == '__main__':
    cli()
